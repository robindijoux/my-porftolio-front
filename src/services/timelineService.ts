// Service pour la gestion des √©v√©nements de timeline
import i18n from '@/i18n/config';
import { apiService, type TimelineEvent, type CreateTimelineEventData, type UpdateTimelineEventData } from './api';

export type { TimelineEvent, CreateTimelineEventData, UpdateTimelineEventData };

const STORAGE_KEY = 'portfolio_timeline_events';

class TimelineService {
  // R√©cup√©ration de tous les √©v√©nements
  async getAllEvents(): Promise<TimelineEvent[]> {
    try {
      console.log('üåê Fetching timeline events from API...');
      const events = await apiService.getTimelineEvents();
      console.log('üì¶ Received events from API:', events.length, events);
      
      // Trier par date (plus r√©cent en premier) - timestamp est maintenant un number
      return events.sort((a, b) => b.timestamp - a.timestamp);
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des √©v√©nements:', error);
      throw new Error(i18n.t('errors.eventsLoadError') || 'Erreur lors du chargement des √©v√©nements');
    }
  }

  // R√©cup√©ration uniquement des √©v√©nements dynamiques (conserv√© pour compatibilit√©)
  async getDynamicEventsOnly(): Promise<TimelineEvent[]> {
    try {
      // Avec la vraie API, tous les √©v√©nements sont "dynamiques" car ils viennent du backend
      return this.getAllEvents();
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des √©v√©nements dynamiques:', error);
      throw new Error(i18n.t('errors.eventsLoadError') || 'Erreur lors du chargement des √©v√©nements');
    }
  }

  // Cr√©ation d'un nouvel √©v√©nement
  async createEvent(eventData: CreateTimelineEventData, accessToken?: string): Promise<TimelineEvent> {
    try {
      console.log('üÜï Creating new timeline event:', eventData);
      const newEvent = await apiService.createTimelineEvent(eventData, accessToken);
      console.log('‚úÖ Event created successfully:', newEvent);
      return newEvent;
    } catch (error) {
      console.error('Erreur lors de la cr√©ation de l\'√©v√©nement:', error);
      throw new Error(i18n.t('errors.eventCreateError') || 'Erreur lors de la cr√©ation de l\'√©v√©nement');
    }
  }

  // Suppression d'un √©v√©nement
  async deleteEvent(id: string, accessToken?: string): Promise<void> {
    try {
      console.log('üóëÔ∏è Deleting timeline event:', id);
      await apiService.deleteTimelineEvent(id, accessToken);
      console.log('‚úÖ Event deleted successfully');
    } catch (error) {
      console.error('Erreur lors de la suppression de l\'√©v√©nement:', error);
      throw new Error(i18n.t('errors.eventDeleteError') || 'Erreur lors de la suppression de l\'√©v√©nement');
    }
  }

  // R√©cup√©ration d'un √©v√©nement par ID
  async getEventById(id: string): Promise<TimelineEvent | null> {
    try {
      console.log('üîç Fetching timeline event by ID:', id);
      const event = await apiService.getTimelineEventById(id);
      console.log('üì¶ Received event:', event);
      return event;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de l\'√©v√©nement:', error);
      // Si l'√©v√©nement n'est pas trouv√©, retourner null au lieu de throw
      if (error instanceof Error && error.message.includes('404')) {
        return null;
      }
      throw new Error(i18n.t('errors.eventDetailError') || 'Erreur lors de la r√©cup√©ration de l\'√©v√©nement');
    }
  }

  // Mise √† jour d'un √©v√©nement
  async updateEvent(id: string, eventData: UpdateTimelineEventData, accessToken?: string): Promise<TimelineEvent> {
    try {
      console.log('üìù Updating timeline event:', id, eventData);
      const updatedEvent = await apiService.updateTimelineEvent(id, eventData, accessToken);
      console.log('‚úÖ Event updated successfully:', updatedEvent);
      return updatedEvent;
    } catch (error) {
      console.error('Erreur lors de la mise √† jour de l\'√©v√©nement:', error);
      throw new Error(i18n.t('errors.eventUpdateError') || 'Erreur lors de la mise √† jour de l\'√©v√©nement');
    }
  }

  // Export des √©v√©nements (utilise maintenant les donn√©es du backend)
  async exportEvents(): Promise<void> {
    try {
      const events = await this.getAllEvents();
      const dataStr = JSON.stringify(events, null, 2);
      const dataBlob = new Blob([dataStr], { type: 'application/json' });
      const url = URL.createObjectURL(dataBlob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `timeline-events-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Erreur lors de l\'export:', error);
      throw new Error(i18n.t('errors.exportError') || 'Erreur lors de l\'export');
    }
  }

  // Import des √©v√©nements (obsol√®te avec la vraie API - cette fonction n'est plus appropri√©e)
  async importEvents(file: File): Promise<void> {
    console.warn('‚ö†Ô∏è Import function is deprecated when using real API. Use the admin interface instead.');
    throw new Error('Import function is not available when using real API. Please use the admin interface to create events individually.');
  }

  // Suppression de tous les √©v√©nements (obsol√®te avec la vraie API - risqu√©)
  async clearAllDynamicEvents(): Promise<boolean> {
    console.warn('‚ö†Ô∏è clearAllDynamicEvents is not available when using real API for safety reasons.');
    throw new Error('Bulk deletion is not available when using real API for safety reasons. Please delete events individually.');
  }

  // Utilitaire pour extraire l'ann√©e d'un timestamp num√©rique
  getYearFromTimestamp(timestamp: number): string {
    return new Date(timestamp).getFullYear().toString();
  }

  // M√©thode obsol√®te conserv√©e pour compatibilit√©
  getYearFromDate(dateString: string): string {
    console.warn('‚ö†Ô∏è getYearFromDate is deprecated, use getYearFromTimestamp instead');
    return new Date(dateString).getFullYear().toString();
  }

  // Statistiques des √©v√©nements
  async getEventStats(): Promise<{
    total: number;
    education: number;
    work: number;
    achievement: number;
  }> {
    try {
      const allEvents = await this.getAllEvents();
      
      return {
        total: allEvents.length,
        education: allEvents.filter(e => e.type === 'education').length,
        work: allEvents.filter(e => e.type === 'work').length,
        achievement: allEvents.filter(e => e.type === 'achievement').length,
      };
    } catch (error) {
      console.error('Erreur lors du calcul des statistiques:', error);
      throw new Error('Erreur lors du calcul des statistiques');
    }
  }

  // ========== M√âTHODES OBSOL√àTES (COMPATIBILIT√â) ==========
  // Ces m√©thodes sont conserv√©es pour la compatibilit√© mais ne sont plus utilis√©es

  // √âv√©nements statiques de base (obsol√®te - maintenant dans le backend)
  private getStaticEvents(): TimelineEvent[] {
    console.warn('‚ö†Ô∏è getStaticEvents is deprecated - events are now managed by the backend API');
    return [];
  }

  // R√©cup√©ration des √©v√©nements dynamiques depuis localStorage (obsol√®te)
  private getDynamicEvents(): TimelineEvent[] {
    console.warn('‚ö†Ô∏è getDynamicEvents is deprecated - events are now managed by the backend API');
    return [];
  }

  // Sauvegarde des √©v√©nements dynamiques (obsol√®te)
  private saveDynamicEvents(events: TimelineEvent[]): void {
    console.warn('‚ö†Ô∏è saveDynamicEvents is deprecated - events are now managed by the backend API');
  }
}

// Instance unique du service Timeline
export const timelineService = new TimelineService();

// Types pour la gestion des erreurs
export interface TimelineApiError {
  message: string;
  type?: 'storage' | 'parsing' | 'validation';
}

// Hook d'√©tat pour les composants (optionnel)
export interface TimelineApiState<T> {
  data: T | null;
  loading: boolean;
  error: string | null;
}